<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-03-02</title>
    <url>/2020/03/02/diary/2020-03-02/</url>
    <content><![CDATA[<h2 id="今日完成"><a href="#今日完成" class="headerlink" title="今日完成"></a>今日完成</h2><ul>
<li>经济学人一篇</li>
<li>李正元数学一章</li>
<li>张宇数学复习两章</li>
<li>健身10分钟</li>
<li>学习时长5 h 32 min</li>
</ul>
<h2 id="今日总结（最多两行）"><a href="#今日总结（最多两行）" class="headerlink" title="今日总结（最多两行）"></a>今日总结（最多两行）</h2><ul>
<li>今天晚上没怎么学习，沉迷刷Twitter了，早上还偷偷睡了一会，不行啊，明天要注意啦</li>
</ul>
<h2 id="明天（最多五个）"><a href="#明天（最多五个）" class="headerlink" title="明天（最多五个）"></a>明天（最多五个）</h2><ul>
<li>经济学人</li>
<li>数学</li>
<li>数据结构</li>
</ul>
<h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><ul>
<li>六点起床</li>
<li>复习“习惯”</li>
<li>洗面奶</li>
<li>午睡半小时</li>
<li>健身10分钟</li>
<li>做事不听歌</li>
<li>收电脑、手机</li>
<li>看日历</li>
<li>ipad写一下计划</li>
<li>23点前睡觉</li>
</ul>
]]></content>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题整理</title>
    <url>/2020/03/01/LeetCode%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="LeetCode-389"><a href="#LeetCode-389" class="headerlink" title="LeetCode 389"></a>LeetCode 389</h3><blockquote>
<p>给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，它们只包含小写字母。</p>
<p>字符串 <strong><em>t\</em></strong> 由字符串 <strong><em>s\</em></strong> 随机重排，然后在随机位置添加一个字母。</p>
<p>请找出在 <strong><em>t</em></strong> 中被添加的字母。</p>
</blockquote>
<ul>
<li><p>MyCode:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> hashTable[<span class="number">26</span>];</span><br><span class="line">	    <span class="built_in">memset</span>(hashTable,<span class="number">0</span>,<span class="keyword">sizeof</span>(hashTable));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">		    <span class="keyword">int</span> k = s[i] - <span class="string">'a'</span>;</span><br><span class="line">		    hashTable[k]++;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; t.length();i++)&#123;</span><br><span class="line">		    <span class="keyword">int</span> k = t[i] - <span class="string">'a'</span>;</span><br><span class="line">		    hashTable[k]--;</span><br><span class="line">	    &#125;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>;i++)&#123;</span><br><span class="line">		    <span class="keyword">if</span>(hashTable[i] != <span class="number">0</span>)&#123;</span><br><span class="line">			    ch = i + <span class="string">'a'</span>;</span><br><span class="line">			    </span><br><span class="line">		    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>优秀解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法：异或，两个相同元素异或之后的值是0，0和x(任何数)异或等于x，还有一点非常重要：就是不管两个相同的数是在什么时候异或的，最终的结果都会存在0</span></span><br><span class="line"><span class="comment">// 我举个例子：假如有6个数字：2 3 4 4 3 2， 不管是2^3^4^4^3^2 还是我们经过处理之后组合起来 (2^2)^(3^3)^(4^4)结果都是一样的，不会影响结果</span></span><br><span class="line"><span class="comment">// 那我们想下本题两个字符串中的字符，s和t中相同的字符都存在两个，将他们全部异或之后肯定为0，然后其中还有一个多出来的就成了0^x=x，从而得到结果，不知道大家理解没</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="keyword">String</span> s, <span class="keyword">String</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            result ^= s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            result ^= t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>《算法笔记》第八章</title>
    <url>/2020/03/01/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第八章-搜索"><a href="#第八章-搜索" class="headerlink" title="第八章 搜索"></a>第八章 搜索</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul>
<li><p>问题：有n件物品，每件物品的重量为w[i]，价值为c[i]。现在需要选出若干件物品放入一个容器为V的背包，使得在选入背包的物品重量和不超过容量V的前提下，让背包中的物品价值之和最大，求最大价值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,V,maxValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sumW,<span class="keyword">int</span> sumC)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sumW &lt;= V &amp;&amp; sumC &gt; maxValue)&#123;</span><br><span class="line">            maxValue = sumC;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(index + <span class="number">1</span>,sumW,sumC);  <span class="comment">//不选第index件</span></span><br><span class="line">    DFS(index + <span class="number">1</span>,sumW + w[index],sumC + c[index]); <span class="comment">// 选第index件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,V,maxValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sumW,<span class="keyword">int</span> sumC)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(index + <span class="number">1</span>,sumW,sumC);  <span class="comment">//不选第index件</span></span><br><span class="line">    <span class="keyword">if</span>(sumW + w[index] &lt;= V)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(sumC + c[index] &gt; ans)&#123;</span><br><span class="line">            ans = sumC + c[index];</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(index + <span class="number">1</span>,sumW + w[index],sumC + c[index]); <span class="comment">// 选第index件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个问题其实等价于：给定一个序列，枚举这个序列的所有子序列。也等价于：枚举从N个整数中选择K个数的所有方案。例如：给定N个整数，从中选择K个数，使得这K个数之和恰好为一个给定的整数X，如果有多种方案，选择它们元素平方和最大的一个。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,k,x,maxSumSqu = <span class="number">-1</span>,A[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> nowK,<span class="keyword">int</span> sum,<span class="keyword">int</span> sumSqu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nowK == k &amp;&amp; sum == x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sumSqu &gt; maxSumSqu)&#123;</span><br><span class="line">            maxSumSqu = sumSqu;</span><br><span class="line">            ans = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == n || nowK &gt; k || sum &gt; x)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//选index号数</span></span><br><span class="line">    temp.push_back(A[index]);</span><br><span class="line">    DFS(index + <span class="number">1</span>,nowK + <span class="number">1</span>,sum + A[index],sumSqu + A[index] * A[index]);</span><br><span class="line">    temp.pop_back();</span><br><span class="line">    <span class="comment">//不选index号数</span></span><br><span class="line">    DFS(index + <span class="number">1</span>,nowK,sum,sumSqu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题变为：假设N个整数中的每一个都可以被多次选择多次，那么选择K个数，使得K个数之和恰好为X。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,k,x,maxSumSqu = <span class="number">-1</span>,A[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> nowK,<span class="keyword">int</span> sum,<span class="keyword">int</span> sumSqu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nowK == k &amp;&amp; sum == x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sumSqu &gt; maxSumSqu)&#123;</span><br><span class="line">            maxSumSqu = sumSqu;</span><br><span class="line">            ans = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == n || nowK &gt; k || sum &gt; x)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push_back(A[index]);</span><br><span class="line">    DFS(index,nowK + <span class="number">1</span>,sum + A[index],sumSqu + A[index] * A[index]); <span class="comment">// 不同</span></span><br><span class="line">    temp.pop_back();</span><br><span class="line">    DFS(index + <span class="number">1</span>,nowK,sum,sumSqu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="广度搜索"><a href="#广度搜索" class="headerlink" title="广度搜索"></a>广度搜索</h3><ul>
<li><p>BFS模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        取出队首元素top;</span><br><span class="line">        访问队首元素top;</span><br><span class="line">        将队首元素出队;</span><br><span class="line">        将top的下一层节点中未曾入队的节点全部入队，并设置已入队；</span><br><span class="line">        <span class="comment">//注意：设置的是节点是否已入队而不是是否已被访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对下一层节点选取，可以使用增量数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> X[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">    newX = nowX + X[i];</span><br><span class="line">    newY = nowY + Y[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用STL的queue时，元素入队的push操作只是制造了该元素的一个副本，因此，入队后对原元素的修改不会影响副本，对副本的操作也不会影响原元素。</p>
<p>所以，当需要对队列中的元素进行修改而不仅仅是访问时，队列中存放的元素最好不是元素本身而是它们的编号。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/03/01</title>
    <url>/2020/03/01/diary/2020-03-01/</url>
    <content><![CDATA[<h2 id="今日完成"><a href="#今日完成" class="headerlink" title="今日完成"></a>今日完成</h2><ul>
<li>经济学人一篇</li>
<li>李正元数学第一章</li>
<li>算法笔记第5-8章整理</li>
<li>LeetCode 2题（#345  #389）</li>
<li>学习时长8 h 10 min</li>
</ul>
<h2 id="今日总结（最多两行）"><a href="#今日总结（最多两行）" class="headerlink" title="今日总结（最多两行）"></a>今日总结（最多两行）</h2><ul>
<li>数学做多了眼睛好痛，明天记得一小时休息一下看能不能减轻疼痛。LeetCode上面化的时间过去了，一晚上就只刷了两题，而且还是简单题，难题没思路也不大敢做</li>
</ul>
<h2 id="明天（最多5个）"><a href="#明天（最多5个）" class="headerlink" title="明天（最多5个）"></a>明天（最多5个）</h2><ul>
<li>经济学人</li>
<li>中午数学</li>
<li>晚上数据结构</li>
</ul>
<h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><ul>
<li><p>六点起床</p>
</li>
<li><p>洗面奶</p>
</li>
<li><p>ipad写一下计划</p>
</li>
<li><p>复习一遍“习惯”</p>
</li>
<li><p>午睡半小时</p>
</li>
<li><p>做事不听歌</p>
</li>
<li><p>收电脑、手机</p>
</li>
<li><p>刷学习强国</p>
</li>
<li><p>拖地</p>
</li>
<li><p>23点前睡觉</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>《算法笔记》第五章</title>
    <url>/2020/03/01/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第五章-入门篇（2）-数学问题"><a href="#第五章-入门篇（2）-数学问题" class="headerlink" title="第五章 入门篇（2） 数学问题"></a>第五章 入门篇（2） 数学问题</h2><h3 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h3><ul>
<li><h4 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a * b / gcd(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="分数的四则运算"><a href="#分数的四则运算" class="headerlink" title="分数的四则运算"></a>分数的四则运算</h3><ul>
<li><h4 id="分数的表示和化简"><a href="#分数的表示和化简" class="headerlink" title="分数的表示和化简"></a>分数的表示和化简</h4><ul>
<li><p>分数的表示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span>&#123;</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> up,down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三项规则：</p>
<ul>
<li>使down为非负数。如果分数为负，那么令分子up为负。</li>
<li>如果该分数为0，那么规定其分子为0，分母为1。</li>
<li>分子和分母没有除了1以外的公约数</li>
</ul>
</li>
<li><p>分数的化简</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcb</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> gcb(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">reduction</span><span class="params">(Fraction result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.down &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        result.up = - result.up;</span><br><span class="line">        result.down = -result.down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result.up == <span class="number">0</span>)&#123;</span><br><span class="line">        result.down = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = gcd(<span class="built_in">abs</span>(result.up),<span class="built_in">abs</span>(result.down));</span><br><span class="line">        result.up /= d;</span><br><span class="line">        result.down /= d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="分数的四则运算-1"><a href="#分数的四则运算-1" class="headerlink" title="分数的四则运算"></a>分数的四则运算</h4><ul>
<li><p>分数加法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down + f2.up * f1.down;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分数减法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down - f2.up * f1.down;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分数乘法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.up;</span><br><span class="line">    result.down = f1.down * f2.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分数除法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction f1,Fraction f2)</span></span>&#123;</span><br><span class="line">    Fraction result;</span><br><span class="line">    result.up = f1.up * f2.down ;</span><br><span class="line">    result.down = f1.down * f2.up;</span><br><span class="line">    <span class="keyword">return</span> reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分数的输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showResult</span><span class="params">(Fraction r)</span></span>&#123;</span><br><span class="line">	r = reduction(r);</span><br><span class="line">    <span class="keyword">if</span>(r.down == <span class="number">1</span>)	<span class="built_in">cout</span> &lt;&lt; r.up;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(r.up) &gt; r.down)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r.up / r.down &lt;&lt; <span class="string">" "</span>&lt;&lt; <span class="built_in">abs</span>(r.up) % r.down &lt;&lt;<span class="string">"/"</span> &lt;&lt; r.down;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r.up &lt;&lt; <span class="string">"/"</span>&lt;&lt; r.down;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h4><ul>
<li><h4 id="判断是否为素数"><a href="#判断是否为素数" class="headerlink" title="判断是否为素数"></a>判断是否为素数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否为素数，该方法10^5内可以运行</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> sqr = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span> * n);		<span class="comment">//sqrt在math.h中，参数必须为浮点数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= sqr;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="素数表的获取"><a href="#素数表的获取" class="headerlink" title="素数表的获取"></a>素数表的获取</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，用算法经常出现要特判n=1时不是素数，即另p[1] = true;</span></span><br><span class="line"><span class="comment">//求2--maxn的全部素数表，用了筛选法，效率高</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;	<span class="comment">//表长</span></span><br><span class="line"><span class="keyword">int</span> prime[maxn],pNum = <span class="number">0</span>; <span class="comment">//prime数组存储所以素数，pNum为素数个数</span></span><br><span class="line"><span class="keyword">bool</span> p[maxn] = &#123;<span class="number">0</span>&#125;;	<span class="comment">//	若为素数，p[i]为false，否则为true</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; maxn;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[i] == <span class="literal">false</span>)&#123;</span><br><span class="line">			prime[pNum++] = i;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; maxn;j += <span class="number">1</span>)&#123;</span><br><span class="line">				p[j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="质因子的分解"><a href="#质因子的分解" class="headerlink" title="质因子的分解"></a>质因子的分解</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="大整数运算"><a href="#大整数运算" class="headerlink" title="大整数运算"></a>大整数运算</h4><ul>
<li><p>大整数的存储</p>
</li>
<li><p>大整数的四则运算</p>
<ul>
<li><p>高精度加法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>高精度减法</p>
</li>
<li><p>高精度乘法</p>
</li>
<li><p>高精度除法</p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="扩展欧里几得算法-TODO"><a href="#扩展欧里几得算法-TODO" class="headerlink" title="扩展欧里几得算法 //TODO"></a>扩展欧里几得算法 //TODO</h4></li>
<li><h4 id="组合数-TODO"><a href="#组合数-TODO" class="headerlink" title="组合数 //TODO"></a>组合数 //TODO</h4></li>
</ul>
]]></content>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/02/29</title>
    <url>/2020/02/29/diary/2020-02-29/</url>
    <content><![CDATA[<h2 id="今日完成"><a href="#今日完成" class="headerlink" title="今日完成"></a>今日完成</h2><ul>
<li>早上这个网站终于完成啦，应该不会有太多修改</li>
<li>中午看了几个数学视频</li>
<li>午睡了半小时</li>
<li>中午和晚上整理《算法笔记》第四章的知识点，太多了！！！</li>
</ul>
<h2 id="今日总结（最多两行）"><a href="#今日总结（最多两行）" class="headerlink" title="今日总结（最多两行）"></a>今日总结（最多两行）</h2><ul>
<li>总算开始干点什么了，但是因为东西太多，态度不够认真，晚上整理到后面，代码没思考就直接抄上去</li>
<li>明天加油</li>
</ul>
<h2 id="明天（最多5个）"><a href="#明天（最多5个）" class="headerlink" title="明天（最多5个）"></a>明天（最多5个）</h2><ul>
<li>早上英语单词和经济学人</li>
<li>中午数学</li>
<li>晚上数据结构</li>
</ul>
<h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><ul>
<li>六点起床</li>
<li>洗面奶</li>
<li>看日历</li>
<li>收电脑、手机</li>
<li>做事情不听歌</li>
<li>刷学习强国</li>
<li>拖地、扫地</li>
</ul>
]]></content>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>《算法笔记》第四章</title>
    <url>/2020/02/29/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第四章-入门篇（2）-算法初步"><a href="#第四章-入门篇（2）-算法初步" class="headerlink" title="第四章 入门篇（2）  算法初步"></a>第四章 入门篇（2）  算法初步</h2><blockquote>
<p>重点：<font color="red">红色</font>      不理解：TODO</p>
</blockquote>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>有序 | 无序</p>
<p>​           从无序中选出最小值A[j]放入有序的最后面</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//数组有效值为[1,n]</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;    <span class="comment">//为什么是n次？</span></span><br><span class="line">		<span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[j] &lt; A[k])&#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(A[i],A[k]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>有序 | 无序</p>
<p>​           从左往右拿出无序的第一个与有序的每一个进行比较，找到适当位置放入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//数组有效值为[1,n]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;     <span class="comment">//为什么是n-1次？</span></span><br><span class="line">        <span class="keyword">int</span> temp = A[i],j = i;     <span class="comment">//j≠i-1，否则①出错</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">1</span> &amp;&amp; temp &lt; A[j])&#123;</span><br><span class="line">            A[j] = A[j<span class="number">-1</span>];         <span class="comment">//①</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        A[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><h4 id="排序题与sort函数应用"><a href="#排序题与sort函数应用" class="headerlink" title="排序题与sort函数应用"></a>排序题与sort函数应用</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">  	<span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">  	<span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">  	<span class="keyword">int</span> score;</span><br><span class="line">  	<span class="keyword">int</span> r;   <span class="comment">//排名</span></span><br><span class="line">  &#125;student[<span class="number">100</span>];</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>对student数组按照<strong>分数从<font color="red">高到低</font>排序，分数相同按姓名的字典序<font color="red">从小到大</font>排序</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a,Stuent b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.score != b.score) <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name,b,name) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(student,student + n,cmp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用sort函数，对已经排好序的student数组进行排名，排名要求：<strong>分数不同排名不同，分数相同排名相同但占用一个位置</strong>。例如：1,2,2,2,5</p>
<ul>
<li><p>方法一：适用于在结构体内记录每个学生的排名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stu[<span class="number">0</span>].r = <span class="number">1</span>;  <span class="comment">//student数组有效值[0,n-1]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(stu[i].score == stu[i<span class="number">-1</span>])&#123;</span><br><span class="line">          stu[i].r = stu[i - <span class="number">1</span>].r;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          stu[i].r = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：不需要在结构体内记录排名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; stu[i].score != stu[i - <span class="number">1</span>].score)&#123;</span><br><span class="line">        r = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出student信息、排名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><ul>
<li><h4 id="引入散列的问题"><a href="#引入散列的问题" class="headerlink" title="引入散列的问题"></a>引入散列的问题</h4><p>N个正整数为{8,3,7,6,2}，欲查询的M个正整数为{7,4,2}，问：这M个数中的每个数分别是否存在N个数中出现过？/出现过几次？</p>
<p>散列：把元素x通过一个函数H(x)转换为整数key，使得整数key可以尽量唯一地代表这个元素。</p>
<p>当元素x为整数时H(x)=x，比较简单，但是当元素x为字符串时怎么办？</p>
<p>即问题变为：给出N个字符串，再给出M个查询字符串，问每个查询字符串在N个字符串中出现几次？</p>
</li>
<li><h4 id="字符串hash"><a href="#字符串hash" class="headerlink" title="字符串hash"></a>字符串hash</h4></li>
<li><p>假设字符串由大写字母A-Z组成。我们把A-Z视为0-25，那么<strong>字符串转化为整数的问题</strong>变为<strong>二十六进制转换为十进制的问题</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">         id = id * <span class="number">26</span> + (S[i] - <span class="string">'A'</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> id;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>字符串由大小写字母组成。我们把A-Z视为0-25,a-z视为26-51，那么<strong>字符串转化为整数的问题</strong>变为<strong>五十二十进制的问题</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(S[i] &gt;= <span class="string">'A'</span> &amp;&amp; S[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">        	id = id * <span class="number">52</span> + (S[i] - <span class="string">'A'</span>);</span><br><span class="line">       	<span class="keyword">else</span> <span class="keyword">if</span>(S[i] &gt;= <span class="string">'a'</span> &amp;&amp; S[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">            id = id * <span class="number">52</span> + (S[i] - <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串由大小写字母、数字组成。</p>
<ul>
<li><p>按照小写字母的方法，增大进制数到62。</p>
</li>
<li><p>如果字符串保证在末尾是确定个数的数字，那么可以先把前面的字母按上面的方法转为数字，再将末尾的数字直接拼接上去。例如：“BCD4”,先把BCD转为731，再把4拼接上去，变为7314</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len - <span class="number">1</span>;i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(S[i] &gt;= <span class="string">'A'</span> &amp;&amp; S[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">        	id = id * <span class="number">52</span> + (S[i] - <span class="string">'A'</span>);</span><br><span class="line">       	<span class="keyword">else</span> <span class="keyword">if</span>(S[i] &gt;= <span class="string">'a'</span> &amp;&amp; S[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">            id = id * <span class="number">52</span> + (S[i] - <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    id = id * <span class="number">10</span> + (S[len - <span class="number">1</span>] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><p>把问题划分为若干个规模较小而结构与原问题相同或类似的子问题</p>
</li>
<li><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><ul>
<li><p>递归适合用来实现分治</p>
</li>
<li><p>Fibonacci数列</p>
</li>
<li><p>n！</p>
</li>
<li><p>递归需要递归边界和递归表达式</p>
</li>
<li><p><font color="red">全排列</font>：字典序从小到大地输出1-n的全排列 <code>《算法笔记》Page 115</code></p>
<p>循环控制分支数，递归控制深度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> n,P[maxn],hashTable[maxn] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n + <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,P[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)&#123;</span><br><span class="line">            P[index] = <span class="literal">true</span>;</span><br><span class="line">            hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p><font color="red">n皇后</font>：如何转化为全排列问题？如何优化？<code>《算法笔记》Page 116</code></p>
<p>方案：把棋盘横坐标固定为1,2,3，……，根据棋子放的位置，棋子的纵坐标就是一个全排列，枚举全部全排列，每生成一个排列就判断是否有一对棋子在对角线上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n + <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i - j) == <span class="built_in">abs</span>(P[i] - P[j]))&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) count++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)&#123;</span><br><span class="line">            P[index] = <span class="literal">true</span>;</span><br><span class="line">            hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">            generateP(index + <span class="number">1</span>);</span><br><span class="line">            hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：把判断是否有一对棋子在对角线上放在每次放棋子时，而不是完整生成一个全排列时。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">generateP</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n + <span class="number">1</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[x] == <span class="literal">false</span>)&#123;</span><br><span class="line">            P[index] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pre = <span class="number">1</span>;pre &lt; index;pre++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(index - pre) == <span class="built_in">abs</span>(x - P[pre]))&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                P[index] = x;</span><br><span class="line">                hashTable[x] = <span class="literal">true</span>;</span><br><span class="line">            	generateP(index + <span class="number">1</span>);</span><br><span class="line">            	hashTable[x] = <span class="literal">false</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><ul>
<li><h4 id="简单贪心"><a href="#简单贪心" class="headerlink" title="简单贪心"></a>简单贪心</h4><p>局部最优来使得全局最优</p>
</li>
<li><h4 id="区间贪心"><a href="#区间贪心" class="headerlink" title="区间贪心"></a>区间贪心</h4><ul>
<li><p>区间不相交问题：给出N个开区间(x,y)，从中选择尽可能多的开区间，使得这些开区间两两没有交集。   方案：对N个区间的左端点从大到小排序，，排序后初始化选择第一个区间，然后从第二次开始每次选择左端点最大而且没有交集的区间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inteval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;I[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Inteval a,Inteval b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;I[i].x,&amp;I[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(I,I + n,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>,lastX = I[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(I[i].y &lt;= lastX)&#123;</span><br><span class="line">                lastX = I[i].x;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>区间选点问题：给出N个区间[x,y]，求最少需要确定多少个点，才能使每个闭区间都至少存在一个点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inteval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;I[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Inteval a,Inteval b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;I[i].x,&amp;I[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(I,I + n,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>,lastX = I[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(I[i].y &lt; lastX)&#123;   <span class="comment">//不同</span></span><br><span class="line">                lastX = I[i].x;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><ul>
<li><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><ul>
<li>序列中是否存在满足某条件的元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A[]数组有效值为[0,n-1],A[]递增，传入的初始值为left = 0,right = n - 1</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">      <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span>(A[mid] == x) <span class="keyword">return</span> mid;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(A[mid] &gt; x)&#123;</span><br><span class="line">              right = mid - <span class="number">1</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              left = mid + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 查找失败</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果二分查找的上界超过int的一半时，语句 <code>mid = (left + right) / 2;</code>可能会溢出，用 <code>mid = left + (right - left) / 2;</code>替换。</p>
</li>
<li><p>求出序列中第一个大于等于x的元素的位置L以及第一个大于x的元素的位置R，这样元素x在序列中的存在区间就是[L,R)，如果序列中没有x，那么L和R可以理解为假设x存在，则x应当在的位置。</p>
</li>
<li><p>先考虑第一个问题：求出序列中第一个<strong>大于等于</strong>x的元素的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A[]数组有效值为[0,n-1],A[]递增，传入的初始值为left = 0,right = n</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;    <span class="comment">//注意不同  left==right时，夹出了x位置</span></span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[mid] &gt;= x)&#123;	 <span class="comment">//注意不同</span></span><br><span class="line">            right = mid;     <span class="comment">//注意不同</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;  <span class="comment">// 注意不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再考虑第二个问题：第一个<strong>大于</strong>x的元素的位置R。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A[]数组有效值为[0,n-1],A[]递增，传入的初始值为left = 0,right = n</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;    <span class="comment">//相同</span></span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[mid] &gt; x)&#123;		 <span class="comment">//注意不同</span></span><br><span class="line">            right = mid;     <span class="comment">//相同</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;  <span class="comment">// 相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上两个问题都可以归结为：<strong>寻找有序序列中<font color="red">第一个满足条件C</font>的元素的位置</strong>。以下为模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A[]数组有效值为[0,n-1],A[]递增，传入的初始值为left = 0,right = n(初始值要覆盖所有可能取值)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;    </span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>( 条件C成立 )&#123;		 <span class="comment">//!!!!</span></span><br><span class="line">            right = mid;     </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想<strong>寻找<font color="red">最后一个满足条件C</font>的元素的位置</strong>，则可以先求<strong>第一个满足条件！C</strong>的元素的位置，然后将该位置减一即可</p>
</li>
</ul>
</li>
<li><h4 id="二分法拓展"><a href="#二分法拓展" class="headerlink" title="二分法拓展"></a>二分法拓展</h4><ul>
<li><p>计算根号2的值</p>
</li>
<li><p>在[L,R]上求方程F(x)=0的根</p>
</li>
<li><p>木棒切割问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO</span></span><br></pre></td></tr></table></figure>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3></li>
</ul>
</li>
<li><p>问题：求a^b %m</p>
</li>
<li><p>方法一：如果b为奇数，a^b = a * a^(b-1);如果b为偶数，a^b = a^(b/2) * a^(b/2)。注意：要保证a&lt;m。而且，当m=1，可以特判结果为0.</p>
<p>递归写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> a * binaryPow(a,b - <span class="number">1</span>,m) % m;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        LL mul = binaryPow(a,b/<span class="number">2</span>,m);</span><br><span class="line">        <span class="keyword">return</span> mul * mul % m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：<code>《算法笔记》Page 136</code></p>
<p>非递归写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">binaryPow</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">	LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a % m;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="two-pointers"><a href="#two-pointers" class="headerlink" title="two pointers"></a>two pointers</h3><ul>
<li><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><ul>
<li><p>递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> L1,<span class="keyword">int</span> R1,<span class="keyword">int</span> L2,<span class="keyword">int</span> R2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = L1,j = L2;</span><br><span class="line">    <span class="keyword">int</span> temp[maxn],index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= R1 &amp;&amp; j &lt;= R2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &lt;= A[j])&#123;</span><br><span class="line">            temp[index++] = A[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp[index++] = A[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= R1) temp[index++] = A[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= R2) temp[index++] = A[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; index;i++)&#123;</span><br><span class="line">        A[L1 + i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(A[],left,mid);</span><br><span class="line">        mergeSort(A[],mid + <span class="number">1</span>,right);</span><br><span class="line">        merge(A[],left,mid,mid + <span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> A[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>;<span class="built_in">step</span> / <span class="number">2</span> &lt;= n;<span class="built_in">step</span> *= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i += <span class="built_in">step</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = i + <span class="built_in">step</span> / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= n)&#123;</span><br><span class="line">                merge(A,i,mid,mid + <span class="number">1</span>,<span class="built_in">min</span>(i + <span class="built_in">step</span> - <span class="number">1</span>,n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = A[left];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[right] &gt; temp) right--;</span><br><span class="line">        A[left] = A[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[left] &lt;= temp) left++;</span><br><span class="line">        A[right] = A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    A[left] = temp;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = Partition(A,left,right);</span><br><span class="line">        quickSort(A,left,pos - <span class="number">1</span>);</span><br><span class="line">        quickSort(A,pos + <span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="其他高效技巧和算法"><a href="#其他高效技巧和算法" class="headerlink" title="其他高效技巧和算法"></a>其他高效技巧和算法</h3><ul>
<li><p>随机选择算法</p>
<p>问题：如何从一个无序的数组中求出第K大的数</p>
<p>方法：用快速排序的核心算法递归出第K大的数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randPartition</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = (round(<span class="number">1.0</span>*rand()/RAND_MAX(right-left) + left));</span><br><span class="line">    swap(A[p],A[left]);</span><br><span class="line">    <span class="keyword">int</span> temp = A[left];</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[right] &gt; temp) right--;</span><br><span class="line">        A[left] = A[right];</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; A[left] &lt;= temp) left++;</span><br><span class="line">        A[right] = A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    A[left] = temp;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randSelect</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(left == right)	<span class="keyword">return</span> A[left];</span><br><span class="line">    <span class="keyword">int</span> p = randPartition(A,left,right);</span><br><span class="line">    <span class="keyword">int</span> m = p - left + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k == m) <span class="keyword">return</span> A[p];</span><br><span class="line">    <span class="keyword">if</span>(k &lt; m)&#123;</span><br><span class="line">        <span class="keyword">return</span> randSelect(A,left,p - <span class="number">1</span>,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> randSelect(A,p + <span class="number">1</span>,right,k - m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


















</li>
</ul>
]]></content>
      <tags>
        <tag>《算法笔记》</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection</title>
    <url>/2020/02/28/Collection/</url>
    <content><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>我经常在视频、文章中看到一些有趣的知识或工具，但是一时半会用不上，时间久了又会忘掉。这些东西可能没什么用，甚至一辈子也不会派上什么用场，但是能改变我的心情，很奇怪对吧，奇怪就对了，这就是傻逼的我，哈哈哈哈哈哈。</p>
<p>这篇文章主要用来收集这些东西，并不定期的更新。</p>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Euthanasia_Coaster" target="_blank" rel="noopener">安乐死过山车</a><br>这种过山车会快速上升到510米，然后从那里下降500米，达到每小时360公里的速度，接着进入一段旋转轨道，直径一个比一个小，达到10个重力加速度，持续60秒。乘客会由于大脑缺氧供血不足，先陷入昏迷，然后死亡。</p>
</li>
<li><p><a href="https://xiezuocat.com/#/" target="_blank" rel="noopener">写作猫</a></p>
<p>AI 写作助手，可以给出文章中的语言错误。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后端开发学习路线</title>
    <url>/2020/02/27/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><ul>
<li>《Java核心技术》</li>
<li>《Java并发编程实战》</li>
<li>《深入理解Java虚拟机》</li>
<li>《Java编程思想》</li>
<li>《函数式编程思维》</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>《算法》</li>
<li>《算法导论》（不推荐，需要非常扎实的数学功底）</li>
<li>如果学过C++或者完全没基础，推荐《算法笔记》和《算法笔记上机实践》，然后去刷PAT练习</li>
<li>LeetCode</li>
</ul>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ul>
<li>《计算机网络自顶向下》</li>
<li>《TCP/IP详解》</li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li>《鸟哥的Linux私房菜》</li>
<li>《Linux就该这样学》</li>
<li>《Unix高级环境编程》</li>
</ul>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul>
<li>《Spring Boot实战》</li>
<li>《Spring MVC + mybatis开发从入门到精通》</li>
<li>《Spring实战》</li>
<li>《Spring技术内幕》（源码分析，很难）</li>
</ul>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul>
<li>《Elasticsearch服务器开发》</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>《MySQL必知必会》</li>
<li>《高性能MySQL》</li>
<li>《redis入门指南》</li>
</ul>
<h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><ul>
<li>《重构 改善既有代码的设计》</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++企业级开发学习路线</title>
    <url>/2020/02/27/C-C-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h2><ul>
<li><p>C语言    </p>
<p>基础入门</p>
<ul>
<li>《C Primer Plus》</li>
<li>《C和指针》</li>
<li>《C专家编程》</li>
</ul>
</li>
<li><p>C++</p>
<ul>
<li>《C++Primer》</li>
<li>《C++ Primer Plus》（比《C++ Primer Plus》更基础）</li>
<li>《Effective C++》</li>
<li>《More Effective C++》</li>
<li>《C++标准程序库》</li>
<li>《深入探索C++对象模型》</li>
</ul>
</li>
</ul>
<h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><ul>
<li>基础算法<ul>
<li>《大话数据结构》</li>
<li>《剑指offer》</li>
<li>Leetcode刷题</li>
<li>《算法笔记》《算法笔记上机实践》（刚入门使用，配合PAT刷题记住部分模板）</li>
<li>《算法》（Java语言）</li>
</ul>
</li>
<li>进阶算法<ul>
<li>《算法导论》</li>
</ul>
</li>
</ul>
<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><ul>
<li>《计算机网络自顶向下》</li>
<li>《TCP/IP详解》</li>
</ul>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul>
<li>《深入理解操作系统》</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li>《大话设计模式》</li>
</ul>
<h2 id="应用与编程实践"><a href="#应用与编程实践" class="headerlink" title="应用与编程实践"></a>应用与编程实践</h2><ul>
<li>《鸟哥的Linux私房菜》</li>
<li>《Linux就该这么学》</li>
</ul>
<h2 id="编译和调试工具材料"><a href="#编译和调试工具材料" class="headerlink" title="编译和调试工具材料"></a>编译和调试工具材料</h2><ul>
<li>GNU官方关于GCC和GDB的文档（英文）</li>
<li>《debuging with GDB》</li>
<li>《跟我一起写makefile》</li>
</ul>
<h2 id="Linux环境编程"><a href="#Linux环境编程" class="headerlink" title="Linux环境编程"></a>Linux环境编程</h2><ul>
<li>《Unix高级环境编程》</li>
<li>《Linux高性能服务器编程》</li>
<li>《POSIX多线程程序设计》</li>
</ul>
]]></content>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>《读者》2019年1 --- 6期漫画与幽默摘录</title>
    <url>/2020/02/26/%E3%80%8A%E8%AF%BB%E8%80%85%E3%80%8B2019%E5%B9%B41-6%E6%9C%9F%E6%BC%AB%E7%94%BB%E4%B8%8E%E5%B9%BD%E9%BB%98%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<h3 id="神回复"><a href="#神回复" class="headerlink" title="神回复"></a>神回复</h3><p>问：明知女孩已有男朋友还去追求的男生通常是怎样的人？ 答：深谙投资之道的人。追有男朋友的女孩，他只有一个竞争对手；追没有男朋友的女孩，他将面对无数个竞争对手。</p>
<h3 id="最大的风险"><a href="#最大的风险" class="headerlink" title="最大的风险"></a>最大的风险</h3><p>上司：“这个项目交给你负责。你觉得这个项目最大的风险是什么？” 员工：“交给我负责。”</p>
<h3 id="机智"><a href="#机智" class="headerlink" title="机智"></a>机智</h3><p>我买了水果往家走，遇到一个同事，聊了几句，他邀请我到他家坐坐。到他家后，他老婆看我提着水果，就说：“来就来呗，还带啥东西呀！”说着，她接过水果到厨房去洗了。 我灵机一动，对着她的背影喊道：“嫂子别忙活了，弄那么多菜干吗？弄俩菜就行了，我喝不了多少酒……”</p>
<h3 id="缘分"><a href="#缘分" class="headerlink" title="缘分"></a>缘分</h3><p>昨晚家里安排我和一个女孩相亲。吃过牛排，我们去听了高雅的音乐会，互道晚安分开后，我却在烧烤摊和她偶遇了……</p>
<h3 id="噩梦"><a href="#噩梦" class="headerlink" title="噩梦"></a>噩梦</h3><p>妻子：“我现在每天晚上都做噩梦，你说该怎么办？” 丈夫：“别怕，到底是怎样的梦？” 妻子：“我梦见自己穿着大蓬裙，手里拿着皮包在街上走。” 丈夫：“这算什么噩梦？” 妻子：“你不知道，现在大蓬裙已经不流行了，而且我拿的皮包是三年前的款式。”</p>
<h3 id="强词夺理"><a href="#强词夺理" class="headerlink" title="强词夺理"></a>强词夺理</h3><p>老婆：“你当初和我恋爱时，两眼放光，对我挺来电的，现在怎么看都不看我了？” 老公：“我这不是勤俭持家、节约用电嘛。” 老婆：“那你看到年轻漂亮的女人，怎么就两眼放光了呢？” 老公：“我那是开启警示灯，提醒她们，我有老婆，请勿接近。”</p>
<h3 id="姓啥"><a href="#姓啥" class="headerlink" title="姓啥"></a>姓啥</h3><p>儿子今年7岁了，有一天，他和他妈吵架，我夹在中间左右为难。趁他妈不在家，我赶紧劝儿子，说：“一边是我老婆，一边是我儿子，你说我到底该向着谁？”儿子沉思了一会儿，说：“你自己看着办吧，只是别忘了自己姓啥！”</p>
<h3 id="吃肉喝汤"><a href="#吃肉喝汤" class="headerlink" title="吃肉喝汤"></a>吃肉喝汤</h3><p>“双十一”过后，老婆的生活进入疯狂收快递模式。我气愤地说：“你怎么只给自己各种买买买？真是太自私了！” 老婆：“我吃肉你也能喝汤。” 我：“怎么？有给我买的吗？” 老婆：“没有，但这些纸箱你可以拿去卖钱。”</p>
<h3 id="挑剔"><a href="#挑剔" class="headerlink" title="挑剔"></a>挑剔</h3><p>媳妇是处女座，对什么都很挑剔，我很烦她这一点。结果她争辩说：“我这叫完美主义，对什么都精益求精。哪像你，随便什么东西凑合着就得过且过了。” 我很赞同，毕竟她选了我，我选了她。</p>
<h3 id="晚婚"><a href="#晚婚" class="headerlink" title="晚婚"></a>晚婚</h3><p>老婆：“你觉得现代人多大结婚才算正常？” 老公：“男子60周岁，女子55周岁，这样结婚后双方都有退休工资，也不用上班，很幸福！”</p>
<h3 id="硬气"><a href="#硬气" class="headerlink" title="硬气"></a>硬气</h3><p>开学了，表弟因为和同学打架，老师让他回去叫家长。表弟硬气地说：“不用，我打得过他。”老师板着脸说：“×××已经回去叫家长了。”表弟犹豫了一下，依然硬气地说：“两个我也打得过。”</p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>我问男友：“如果我和你妈同时掉进水里，你会怎么样？” 男友说：“我会根据你们二人入水前动作的难度系数，以及入水后水花的大小酌情给分。”</p>
<h3 id="答谢"><a href="#答谢" class="headerlink" title="答谢"></a>答谢</h3><p>哥们儿向我求助：“有个女生帮了我的忙，我想感谢她，但不希望她男友误会，我该怎么做？” 我回答：“给她送一面锦旗。”</p>
<h3 id="小弟"><a href="#小弟" class="headerlink" title="小弟"></a>小弟</h3><p>10岁的小弟对我说：“别在朋友圈晒你去过多少地方了，这只能证明你踏遍祖国大地也没找到对象。”</p>
<h3 id="收入"><a href="#收入" class="headerlink" title="收入"></a>收入</h3><p>“你收入怎么样？” “轻轻松松月入十几万……卡路里。”</p>
<h3 id="卷发棒"><a href="#卷发棒" class="headerlink" title="卷发棒"></a>卷发棒</h3><p>“老公，我的卷发棒在哪？” “棒就棒在和你的气质特别配。”</p>
<h3 id="妈妈的菜"><a href="#妈妈的菜" class="headerlink" title="妈妈的菜"></a>妈妈的菜</h3><p>楼主：家里一直是爸爸做饭，那天妈妈要做，看着教学视频弄了4个菜。我下定决心，不管什么味道，一定要吃干净，要鼓励她！当我将筷子伸向一只螃蟹时，螃蟹突然主动夹住了我的筷子。 回复：螃蟹心想，很熟吗？就动手动脚的。</p>
<h3 id="有此一劫"><a href="#有此一劫" class="headerlink" title="有此一劫"></a>有此一劫</h3><p>我对我妈说，我喜欢一个很优秀的男生，但是感觉没有机会。我妈说，你怕啥，你虽然差劲，但能有机会接触到这么好的人，说明他命中注定有此一劫。</p>
<h3 id="忍不住"><a href="#忍不住" class="headerlink" title="忍不住"></a>忍不住</h3><p>一天，我问快递小哥：“为什么很少见女快递员啊？”小哥一本正经地告诉我：“估计是怕她们在路上忍不住把包裹拆了吧。”</p>
<h3 id="尊重"><a href="#尊重" class="headerlink" title="尊重"></a>尊重</h3><p>酒桌上对一个人最大的尊重，不是多给他敬酒，而是安静地听他一直吹牛……</p>
<h3 id="世界"><a href="#世界" class="headerlink" title="世界"></a>世界</h3><p>听说天桥上有一个算命特别准的先生，我今天终于有幸遇见了他。我说：“大师，您帮我看看手相吧。”大师顿了顿，说：“小伙子，看手没用，这是一个看脸的世界。”</p>
<h3 id="说话"><a href="#说话" class="headerlink" title="说话"></a>说话</h3><p>女上司责骂我的工作状态，我一直低头不语。这样的反应可能激怒了她，她一改平静的语气，咆哮道：“你为什么不说话，你不服吗？”我解释道：“不是，我女朋友不让我跟漂亮女人说话！”</p>
]]></content>
      <tags>
        <tag>杂文摘录</tag>
        <tag>读者</tag>
      </tags>
  </entry>
  <entry>
    <title>《读者》2019年1-6期言论摘录</title>
    <url>/2020/02/26/%E3%80%8A%E8%AF%BB%E8%80%85%E3%80%8B2019%E5%B9%B41-6%E6%9C%9F%E8%A8%80%E8%AE%BA%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<p>饭后百步走，夜宵好胃口。 ——人生的真实写照</p>
<p>理想是花前月下，现实是花下月钱。 ——理想和现实的差距很残酷</p>
<p>酒不会让人变成废物。酒只是教给我们人本来就是废物的道理。</p>
<p>你以为我刀枪不入，我以为你百毒不侵。 ——语出徐志摩《寂寞人心》。我们都自以为是，然后相互猜疑，接着误会，其实现代人缺少的只是一点点坦诚</p>
<p>在自己眼中，去年的衣服配不上你今年的气质；在别人眼中，去年的衣服装不下你今年的体形。       ——自我认知和现实的差距</p>
<p>如果我的钱能像我的肉一样对我不离不弃就好了，或者，我的肉能像我的钱一样说没就没了也行。 ——钱与肉</p>
<p>这个城市大得让人到处能一见钟情，却很难重逢。 ——大都市生活感言</p>
<p>懂得爱情的夫妻，讥笑会演化成幽默；不懂爱情的夫妻，讥笑会演化成暴力。 ——夫妻相处定律</p>
<p>深夜简直就是另外一个世界，因为人们不是卸“装”就是卸妆。 ——在深夜可以重新认识一个人</p>
<p>现在经常要用“哈哈哈哈哈哈哈哈哈哈，没事啦”来证明自己真的没有生气。 ——上网几年，见证了“哈”字的“通货膨胀”，过去用“哈哈”就已经代表很好笑了</p>
<p>不是发际线在后退，而是你的人生在前进。 ——换个角度看问题</p>
<p>我要你，我要一点空间，我要我自己。 ——一段感情里，往往会</p>
<p>有这样的转变想想有没有人会惯着你。 ——每次发脾气前要先这么想想，据说这个方法可以制怒</p>
<p>悲观的人说：“我的生活已经不可能更糟了！”乐观的人说：“绝对可能！” ——悲观和乐观是相对的</p>
<p>无“递”自容。 ——指网购大促销期间没有快递可拿，而身边的朋友同事都有，因此感到无法融入大环境；也指快递多到没地方放，连自己站立的地方都没有了</p>
<p>拿到快递不急着拆，买了奶茶就打包，闹钟一响就起床。 ——狠心人的三大表现</p>
<p>浪漫是什么？浪漫就是慢慢地浪费时间。 ——浪费时间慢慢走，浪费时间慢慢喝茶，浪费时间慢慢吃饭，浪费时间慢慢思考</p>
<p>女友生气了，赶紧哄；男友生气了，让他冷静冷静。 ——男女有别</p>
<p>一、一起旅行；二、有过涉及金钱的往来；三、在他情绪不好的时候跟他打交道。 ——在没经历过这些之前，不要说你真的了解一个人</p>
<p>没有力气再往前走，也没有余地往后退，原地踏步又心有不甘。 ——现代人的焦虑</p>
<p>书籍是进步的阶梯，手机是近视的阶梯。 ——各有通途</p>
<p>最好的生活，莫过于兜里有钱、身边有人、心里有光。 ——能修得一颗平常心，就可平安喜乐地过一生</p>
<p>枕头要常晒，因为里面装满了心酸的泪和发霉的梦。 ——一切终将随风而逝</p>
<p>“秃”如其来。 ——这个时代既给了年轻人前所未有的机会，又给了他们随时可能被淘汰的恐慌， 提前掉落的头发或许就是证明</p>
<p>主动加你为好友的陌生女性，不是你老婆就是微商。 ——人生最好别幻想</p>
<p>男人没有一个寿终正寝的打火机，正如女人没有一支真正用完的口红。 ——男人的打火机，女人的口红</p>
<p>1314，不要再理解成一生一世了，那叫一伤一死。 ——理想和现实</p>
<p>爱情的本质是冲动，婚姻的本质是习惯，生命的本质是孤独。 ——你可以仰视爱人的完美，但也无须将自己放低到渺小的地步</p>
<p>你在朋友圈里又佛又丧，在收藏夹里天天向上。 ——不要在朋友圈里观天下，找机会翻翻他们的收藏夹</p>
<p>我懒得想，但是你必须做出让我满意的选择。 ——所谓“随便”</p>
<p>在童话中，一个人做他想做的事；在现实中，一个人做他能做的事。 ——埃莱娜·费兰特所著“那不勒斯四部曲”之三《离开的，留下的》中的一句话。</p>
<p>人只要活着，总会有好事发生在别人身上。 ——致那些年买过的彩票</p>
<p>人作的程度不要超过自己的颜值。 ——恋爱忠告</p>
<p>少壮不努力，上班像演戏。 ——你是“戏精”吗</p>
<p>请不要问我这么难的问题，如果我是年轻人，老年人说什么我都不会听。 ——日本女星树木希林生前接受媒体采访，被问及对年轻人有什么人生建议时如此回答</p>
<p>拆快递指数。 ——衡量工作量是否超标的有效标准。如果快递一个礼拜都没来得及拆，说明是真的忙；如果3个月内都没快递上门，那估计离过劳死也不远了</p>
<p>除了死亡，一切皆是擦伤。 ——日本一家寺院布告栏上的一句话</p>
<p>孩子静悄悄，必定在作妖。 ——老母亲的经验之谈</p>
<p>当你缺席胜过别人在场时，你才能说自己有影响力。 ——真相往往是“以退为进”</p>
<p>我不要名牌包包，我只要你抱抱。 ——婚姻里的孤独感真的很致命，它无影无形，不见伤口，却伤人至深</p>
<p>向青年卖希望，向中年卖自由，向老年卖健康。 ——最成功的商业模式</p>
<p>街拍必须反映疾苦，拍人必须表情夸张，意境必须破败黯然。 ——当文艺青年端起相机走上街头的那一刻，世界就开始走样</p>
<p>不刨根问底，不明知故问，不刻意揭穿。 ——所谓的高级修养</p>
<p>改变她的心情，而不是她的思想。 ——美国谚语。跟妻子发生矛盾时，一定要记得</p>
<p>自杀式单身。 ——形容一直单身，又不主动扩展社交范围去认识新朋友，却每天幻想能拥有爱情的行为</p>
<p>蝴蝶落吊钟，安然入梦乡。 ——与谢芜村的俳句。蝴蝶是弱小的生灵，她的寿命只有一个夏天，但她活得轻松愉快，竟在象征永恒庄严的青铜钟上心满意足地睡去，表达了一种禅宗的生死观、无常观</p>
<p>古代有用《春秋》断狱，用《河渠书》打井的。现在，则流行用《易经》算命，用《孙子兵法》搞商战，用《论语》提高道德水平。 ——活学活用，既糟蹋书，也糟蹋人</p>
<p>接受父母是平庸的人，接受自己是平庸的人，接受配偶是平庸的人，接受孩子是平庸的人。 ——佛系人生的四个阶段</p>
<p>你的脸色，是孩子整个世界的颜色。 ——不要让他们的世界变得灰暗</p>
<p>读懂你的内心，听懂你说的话，与你的见识同步，配得上你的好，并能互相给予慰藉、理解和力量。 ——作家铁凝解释“聊得来”的深层含义</p>
<p>让自己变得更优秀，并不是为了找到喜欢的人，而是为了让你摆脱跟不喜欢的人将就凑合的命运。 ——这也可以解释为什么职场女性的单身率更高</p>
<p>白天嘈杂得不愿意醒，夜晚安静得舍不得睡。 ——睡觉这件事很难</p>
]]></content>
      <tags>
        <tag>杂文摘录</tag>
        <tag>读者</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo diaspora 主题增加search功能</title>
    <url>/2020/02/26/hexo-diaspora-%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0search%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<ol>
<li><p>cmd下运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page search</span><br></pre></td></tr></table></figure>

<p>编辑hexo根目录下的source/search/index.md文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: search</span><br><span class="line">type: &quot;search&quot;  </span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题的_config.yml文件中找到以下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 头部菜单，title: link</span><br><span class="line">menu:</span><br><span class="line">  Whoami: &#x2F;whoami</span><br><span class="line">  Github: https:&#x2F;&#x2F;github.com&#x2F;yuquanqingyin</span><br><span class="line">  Archives: &#x2F;archives</span><br></pre></td></tr></table></figure>

<p>添加以下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Search: &#x2F;search</span><br></pre></td></tr></table></figure>
</li>
<li><p>在themes\diaspora\source\js文件夹下找到diaspora.js文件，在文件末尾添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function get_posts(text)&#123;</span><br><span class="line">    var posts &#x3D; document.getElementsByClassName(&#39;timeline-item&#39;);</span><br><span class="line">    &#x2F;&#x2F; console.log(posts.length);</span><br><span class="line">    if (text &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">        all_none(posts);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    var count &#x3D; 0;</span><br><span class="line">    for (var i &#x3D; 0;i&lt;posts.length; ++i)&#123;</span><br><span class="line">        var temp &#x3D; posts[i].id.toLowerCase();</span><br><span class="line">        if ( temp.search(text) !&#x3D; -1 )&#123;</span><br><span class="line">            posts[i].style &#x3D; &quot;display: block&quot;;</span><br><span class="line">            count +&#x3D; 1;</span><br><span class="line">            &#x2F;&#x2F; console.log(posts[i].id);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            posts[i].style &#x3D; &quot;display: none&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (count &gt; 0)&#123;</span><br><span class="line">        var search_count &#x3D; document.getElementById(&#39;search_count&#39;);</span><br><span class="line">        search_count.style &#x3D; &quot;display: block&quot;;</span><br><span class="line">        search_count.innerHTML &#x3D; &quot;为你献上&quot;+count+ &quot;篇&quot;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        document.getElementById(&#39;search_count&#39;).style &#x3D; &quot;display: none&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function all_none(posts)&#123;</span><br><span class="line">    for (let i &#x3D; 0;i&lt;posts.length; ++i)&#123;</span><br><span class="line">        document.getElementById(&#39;search_count&#39;).style &#x3D; &quot;display: none&quot;;</span><br><span class="line">        posts[i].style &#x3D; &quot;display: none&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function button_search_onkeypress()&#123;</span><br><span class="line">    var text &#x3D; document.getElementById(&quot;search&quot;).value.toLowerCase();</span><br><span class="line">    &#x2F;&#x2F; console.log(&quot;读取到的文本:&quot;+ text );</span><br><span class="line">    get_posts(text);</span><br><span class="line">&#125;</span><br><span class="line">function text_button_search_onkeypress()&#123;</span><br><span class="line">    var text &#x3D; document.getElementById(&quot;search&quot;).value.toLowerCase();</span><br><span class="line">    var p &#x3D; document.getElementById(&quot;search_test&quot;);</span><br><span class="line">    p.innerHTML &#x3D; text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在themes\diaspora\layout_partial文件夹下新建search.ejs，复制以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;hexosearch&quot;&gt;</span><br><span class="line">    &lt;style &gt;</span><br><span class="line">        input &#123;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type&#x3D;search] &#123;</span><br><span class="line">            -webkit-appearance: textfield;</span><br><span class="line">            font-family: inherit;</span><br><span class="line">            font-size: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">        input::-webkit-search-decoration,</span><br><span class="line">        input::-webkit-search-cancel-button &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type&#x3D;search] &#123;</span><br><span class="line">            border: solid 1px #ccc;</span><br><span class="line">            padding: 9px 9px 9px 9px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            -webkit-border-radius: 10em;</span><br><span class="line">            -moz-border-radius: 10em;</span><br><span class="line">            border-radius: 10em;</span><br><span class="line">            -webkit-transition: all .5s;</span><br><span class="line">            -moz-transition: all .5s;</span><br><span class="line">            transition: all .5s;</span><br><span class="line">        &#125;</span><br><span class="line">        input[type&#x3D;search]:focus &#123;</span><br><span class="line">            width: 130px;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">            border-color: #6dcff6;</span><br><span class="line">            margin-left: -11px;</span><br><span class="line">            margin-right: 11;</span><br><span class="line">            width: 330px;</span><br><span class="line">            -webkit-box-shadow: 0 0 5px rgba(109, 207, 246, .5);</span><br><span class="line">            -moz-box-shadow: 0 0 5px rgba(109, 207, 246, .5);</span><br><span class="line">            box-shadow: 0 0 5px rgba(109, 207, 246, .5);</span><br><span class="line">        &#125;</span><br><span class="line">        input:-moz-placeholder &#123;</span><br><span class="line">            color: #999;</span><br><span class="line">        &#125;</span><br><span class="line">        input::-webkit-input-placeholder &#123;</span><br><span class="line">            color: #999;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;margin-top: 123px;text-align:center&quot;&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">            &lt;input id &#x3D; &quot;search&quot; name&#x3D; &quot;search&quot; type&#x3D;&quot;search&quot; placeholder&#x3D;&quot;积极开发中&quot; autocomplete&#x3D;&quot;off&quot; style&#x3D;&quot;text-align:center&quot; onfocus&#x3D;&quot;this.setAttribute(&#39;placeholder&#39;, &#39;&#39;); &quot; onblur&#x3D;&quot;if (this.value &#x3D;&#x3D; &#39;&#39;) this.setAttribute(&#39;placeholder&#39;, &#39;下次一定！&#39;);&quot; onkeyup&#x3D;&quot;button_search_onkeypress(),this.value&#x3D;this.value.replace(&#x2F;(^\s*)&#x2F;g,&#39;&#39;)&quot;&gt;</span><br><span class="line">            &lt;input id &#x3D; &quot;search-btn&quot; style&#x3D;&quot;display: none;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 下面是归档代码 直接套过来 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;single&quot; class&#x3D;&quot;page&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;top&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;icon-left image-icon&quot; href&#x3D;&quot;javascript:history.back()&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;section&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;article&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;timeline&quot;&gt;</span><br><span class="line">                      &lt;h2 style&#x3D;&quot;display:none&quot; class&#x3D;&quot;timeline-title&quot; id&#x3D;&quot;search_count&quot;&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">                      &lt;% var posts &#x3D; site.posts.sort(&#39;date&#39;, &#39;desc&#39;); %&gt;</span><br><span class="line">                      &lt;% for(let i &#x3D; 0, year &#x3D; -1; i &lt; posts.data.length; ++i) &#123; %&gt;</span><br><span class="line">                        &lt;%</span><br><span class="line">                          const psg &#x3D; posts.data[i];</span><br><span class="line">                          if(psg.date.year() !&#x3D;&#x3D; year) &#123;</span><br><span class="line">                            year &#x3D; psg.date.year();</span><br><span class="line">                        %&gt;</span><br><span class="line">                        &lt;% &#125; %&gt;</span><br><span class="line">                        &lt;% var text &#x3D; &quot;&quot; %&gt;</span><br><span class="line">                        &lt;% for(let i &#x3D; 0; i &lt; psg.tags.data.length; ++i) &#123; %&gt;</span><br><span class="line">                            &lt;%</span><br><span class="line">                              text +&#x3D; &quot;|&quot;;</span><br><span class="line">                              text +&#x3D; psg.tags.data[i].name;</span><br><span class="line">                            %&gt;</span><br><span class="line">                            &lt;% &#125; %&gt;</span><br><span class="line">                        &lt;div style&#x3D;&quot;display:none&quot; class&#x3D;&quot;timeline-item&quot; id&#x3D;&lt;%&#x3D; psg.title + text %&gt; &gt;</span><br><span class="line">                          &lt;time&gt;&lt;%- psg.date.format(&quot;YYYY-MM-DD&quot;) %&gt;&lt;&#x2F;time&gt;</span><br><span class="line">                          &lt;a target&#x3D;&quot;_self&quot; href&#x3D;&quot;&lt;%- url_for(psg.path) %&gt;&quot;&gt;&lt;%&#x3D; psg.title %&gt;&lt;&#x2F;a&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                      &lt;% &#125; %&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整！！！</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>I am bored,what do I do</title>
    <url>/2020/02/26/I-am-bored-what-do-I-do/</url>
    <content><![CDATA[<blockquote>
<p>If you are bored it’s because you haven’t done anything.</p>
</blockquote>
<p>By <strong>Ibrahim Diallo</strong></p>
<p>Published Jul 3 2018 ~ 5 minutes read</p>
<p>I have spent an unhealthy amount of time in front of a device scrolling and scrolling. Every second there is more content to consume. There is a funny video, a meme, a political rant, an inspiring quote, a funny video, a meme, a political rant, an inspiring quote and it goes on and on in a loop. From time to time I break the loop and turn to a long interesting article that tickles my intellect. I read and feel smarter. Then I look for another article to give me more of that same substance, but I can’t get more.</p>
<p>“In other words, I am bored.”</p>
<p>The more I consume, the more I need to consume, the more bored I feel. I often turn to video games to release the tension. I can spend two solid hours shooting at virtual objects until I start to feel less entertained. I then find myself pulling up my phone closer to consume more scrollable content while still playing the game. Only when all my sense are stimulated at the same time, I feel relieved.</p>
<p>Some say it takes 21 days to form a habit, others believe it is more around 66 days. Either way, it shows that we are creatures of habit and if we perform a task long enough it becomes part of our routine. Boredom becomes part of our routine. We have to consume social media to become less bored, yet the more we consume the more bored we are.</p>
<p>This becomes the new norm. Anything less will result in that acute sense of boredom. Have a conversation with a friend, you’ll feel bored. They can’t possibly compete with a video game, a political rant and a funny video at the same time. Right in the middle of a conversation you hear that familiar beep from your phone and you have to pick it up. It’s not that you ignore your friends, or the dinner conversation, it’s that you need to have them all occur at the same time to feel normal.</p>
<p><img src="https://cdn.idiallo.com/images/assets/355/bored.jpg" alt="I am bored"></p>
<p>I found myself in the early stages of habit forming boredom, trying to write a post right here on this blog. I had to push myself to type whatever that popped out of my empty head. It was a long incoherent rambling about the fact that I didn’t have anything to write. But along the way something happened.</p>
<p>Switching from <em>consumption</em> to <em>production</em> started to break the thick barrier of habit I had formed in the past. The more I wrote, the easier it was to get ideas out of my head. The more ideas came out of my head, the less I was feeling the need to be entertained. I spent the rest of the day writing about something that I thought was fun, even if it’s just for myself.</p>
<p>“Producing is better than consuming. ”</p>
<p>The mind is like a magical rabbit hat. You can fill the magic hat with an infinite number of rabbits and there is always room for one more. You can’t watch enough Netflix shows, there is always room for one more. If you watch one show because you are bored, you can also watch 3 shows.</p>
<p>The same goes for producing, with a little extra. You can pull an infinite amount of rabbits out of the hat, when it seems empty, dig a little deeper and you find another rabbit. The more you produce, the more ideas you get. And the added benefit is that you feel less the need to be entertained.</p>
<p><img src="https://cdn.idiallo.com/images/assets/355/build.jpg" alt="I am bored"></p>
<p>To put it in less theoretical words, make something. Create something. Build something. Anything!</p>
<p>It can be a clay pot, a drawing on paper, a JavaScript file, a wooden structure, a shoe rack, a sand castle, a matchstick home, a story. It could be anything as long as you can hold what you created and brag about it. It doesn’t even have to be something new or exceptional.</p>
<p>转载自 <a href="https://idiallo.com/blog/im-bored-what-do-i-do" target="_blank" rel="noopener">https://idiallo.com/blog/im-bored-what-do-i-do</a></p>
]]></content>
      <tags>
        <tag>杂文摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>win10搭建hexo博客</title>
    <url>/2020/02/25/win10%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装npm</li>
<li>安装git for window</li>
</ol>
<h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><ol>
<li><p>安装cnpm。利用npm安装cnpm，使得下载更快一些。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证hexo是否安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>在D盘新建文件夹blog，在cmd中切换到blog目录下<img src="/2020/02/25/win10%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/1.png" alt="image1"></p>
</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd d:&#x2F;blog</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>搭建hexo博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>如果在安装git for window完成前就已经打开cmd，那么在输入上述命令后，会报找不到git命令错误，需要重新启动cmd再输入一遍命令（要记得切换地址到d:/blog哦~）</p>
<p>这个过程比较慢，等一下哦~</p>
</li>
<li><p>启动hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 验证是否启动成功</p>
</li>
</ol>
<h2 id="关于文章"><a href="#关于文章" class="headerlink" title="关于文章"></a>关于文章</h2><p>你的文章可以利用一下支持markdown语法的编辑器写，比如我自己用的Typora。写完后复制到D:\blog\source_posts</p>
<p>然后在命令行中执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean    &#x2F;&#x2F;注意，这里必能不会清除掉你的原来的文章，可以放心敲~~~</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="将博客部署到github上，让其他人也能访问"><a href="#将博客部署到github上，让其他人也能访问" class="headerlink" title="将博客部署到github上，让其他人也能访问"></a>将博客部署到github上，让其他人也能访问</h2><ol>
<li><p>在github上建新仓库，注意这里的仓库名格式有严格要求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名.github.io</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>   <img src="/2020/02/25/win10%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/2.png" alt="2"></p>
<p>   我的用户名是yuquanqingyin，所以格式是yuquanqingyin.github.io（这里报错是因为我已经有一个同名的仓库了，第一    次建不会有这个问题）</p>
<p>   其他不用更改，直接点create repository，这样你就能获得一个访问地址，如下图： <img src="/2020/02/25/win10%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/3.png" alt="image1"></p>
<ol start="2">
<li>安装git部署插件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<pre><code>安装完有warning提示，这个可以忽略，进行下一步</code></pre><ol start="3">
<li><p>在d:/blog文件夹下找到_config.yml文件，打开（可以用记事本打开，也可以用NoteP++打开），找到下面这一代进行修改</p>
<p><img src="/2020/02/25/win10%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/4.png" alt="image1"></p>
<p>修改为</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;yuquanqingyin&#x2F;yuquanqingyin.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><strong>注意冒号为英文，type和repo以及branch后面都需要一个空格！！！</strong></p>
<ol start="4">
<li><p>部署到github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这时会报错，按照提示设置git  global变量就可以了，再执行上述命令就可以了</p>
</li>
<li><p>浏览器输入<a href="https://github.com/yuquanqingyin/yuquanqingyin.github.io.git，再输入" target="_blank" rel="noopener">https://github.com/yuquanqingyin/yuquanqingyin.github.io.git，再输入</a> <a href="https://yuquanqingyin.github.io.git" target="_blank" rel="noopener">https://yuquanqingyin.github.io.git</a> 就可以看见自己的博客啦</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客如何插入图片</title>
    <url>/2020/02/25/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>在hexo目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>确认<strong><em>_config.yml</em></strong>文件中<strong><em>post_asset_folder:true</em></strong></p>
</li>
</ol>
<h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><ol start="3">
<li><p>生成文章和对应文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;fileName&quot;</span><br></pre></td></tr></table></figure>

<p>完成后在hexo根目录的\source\ _posts下回生成fileName.md和fileName文件夹</p>
</li>
<li><p>把图片test.png放入fileName文件夹</p>
</li>
<li><p>打开fileName.md，在你需要引用图片test.png的位置填入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![你想要的图片描述](fileName&#x2F;test.png)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 验证是否成功</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
